namespace GameSystems.EnemySystem.EnemyUnitSystem
{
    // Enemy AI에 대한 고찰.

    // 인식범위 가공 -> 인지 데이터 가공 -> 기억 데이터 가공 -> 상황 판단 및 행동 결정 -> 행동.
    // 이러한 방식이 AI를 만드는 기본적인 방식일 것이다.
    // 인식 범위, 인지 데이터, 기억 데이터의 경우, 어떻게 데이터 메모리를 갖도록 할 것인가에 초점이 맞추어 진다.
    // C#의 경우 Dictionary<Type, Interface>를 통해서 다양한 데이터를 인지하게 할 수 있다.
    // '상황 판단 및 행동 결정'은 '어떤 행동'을 수행하게 결정하게 하는 부분이다.

    // 현재는 가장 간단하게, 개발자가 스스로 행동의 순서를 명시하였다. ( 즉, 어떠한 상황에도 '명시된 조건'만 비교하여 행동의 우선순위를 정한다는 것이다. )
    // 이는 매우 기초적인 '행동 순서 결정'이다. 그렇다 '상황 판단'을 하지 않은 것이다.

    // '상황 판단'이라는 것이 들어간다면, 이렇게 될 것이다.
    // '시야 범위 안에 들어온 적 n개 존재한다.' -> 공격하기 위한 이동 + 30, 도망가기 위한 이동 + 10
    // '공격 범위 안에 들어온 적이 n개 존재한다.' -> 공격 + 60, 도망가기 위한 행동 + 20
    // 와 같이, '주변 상황'을 판단하여, 유닛이 수행할 수 있는 '행동'에 '가중치'를 두어, 마지막에 가장 높은 가중치를 갖은 '행동'을 수행하게 하지 않을까 싶다.

    // 결과적으로 내 코드에서는 '가공' -> '행동' 순서 정리된 부분 -> '행동' 을 수행하는 코드로 분류되어 진다.
    // '행동 수행 가능'을 '행동' 클래스에서 판별하여 사용합니다.
    // 아래 인터페이스는 ''행동' 순서 정리된 부분'이다.
    public interface IEnemyUnitAIBehaviourController
    {
        public void InitialSetting(EnemyUnitManagerData enemyUnitManagerData);
        // 행동 판단을 위한 데이터 갱신.
        public void UpdateSensingAndPerceptionData();
        public void DecideAIOperation();
    }
}